AWSTemplateFormatVersion: '2010-09-09'
Description: Template to setup network for ECR deployment for Image App

Parameters:
  EnvironmentName:
    Type: String
    Default: ecs-img-stack
    Description: Environment name
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: Public Subnet 1 CIDR
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: Public Subnet 2 CIDR
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: Private Subnet 1 CIDR
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: Private Subnet 2 CIDR
  AllowedGithubRepo:
    Type: String
    Default: YawFrimpong139/wk5-photo-app
    Description: Allowed Github Repo
  AllowedGithubBranch:
    Type: String
    Default: refs/heads/main
    Description: Allowed Github Branch
  AppPort:
    Type: Number
    Default: 80
    Description: Application Port
  DeploymentZipFileName:
    Type: String
    Default: deployment-files.zip
    Description: Deployment Zip File Name
  DBName:
    Type: String
    Default: gallerydb
    Description: Database Name
  DBMasterUsername:
    Type: String
    Default: gallery_user
    Description: Database Master Username
  DBInstanceClass:
    Type: String
    Default: db.t3.small
    Description: Database Instance Class
  DBEngine:
    Type: String
    Default: postgres
    Description: Database Engine
  DBEngineVersion:
    Type: String
    Default: 14.17
    Description: Database Engine Version
  AllocatedStorage:
    Type: Number
    Default: 20
    Description: Database Allocated Storage
  DBStorageType:
    Type: String
    Default: gp2
    Description: Database Storage Type

Resources:
  ## NETWORKING

  EcsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  # IGW Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EcsVPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Public Subnets Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1RouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnets Route Table Association
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable


  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2


  # Private Subnets Route Table
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1RouteTable

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2RouteTable


  # Private Subnets Route Table Association
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

###########################################
## -- 2. VPC Endpoints -- ##
###########################################
  # Gateway Endpoint for S3
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-s3

  # Interface Endpoint Security Groups to allow traffic from ECS SG
  VPCEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC endpoint security group
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-sg

  # # Interface Endpoint
  # ECR Endpoint
  ECRApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-ecr-api


  # ECR DKR Endpoint for pulling images
  ECRDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-ecr-dkr


  # CloudWatch Logs Endpoint
  CloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-logs

  # Secrets Manager Endpoint for storing and retrieving secrets
  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG


  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSG
      PrivateDnsEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-secrets-manager


  ## Private S3 Bucket for storing and retrieving Images
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-image-bucket
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-image-bucket


  # S3 Bucket Policy to allow access when coming from s3 VPC endpoints and ECS SG
  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAccessFromVPCEndpoints
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
              - s3:ListBucket
            Resource:
              - !Sub arn:aws:s3:::${ImageBucket}
              - !Sub arn:aws:s3:::${ImageBucket}/*
            Condition:
              StringEquals:
                aws:SourceVpce: !Ref S3GatewayEndpoint




  ## DATABASE INFRASTRUCTURE -- RDS PostgreSQL
  ###########################################
  # DB Subnet Group: specifies the subnets that will be used for the DB
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub ${EnvironmentName} db subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DBSubnetGroupName: !Sub ${EnvironmentName}-db-subnet-group
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-db-subnet-group


  # DB Security Group: specifies the security groups that will be used for the DB
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS access from ECS tasks
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-db-sg

  # DB Secrets
  DBCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}/rds/postgres/credentials
      Description: !Sub RDS credentials for ${EnvironmentName}
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUsername}"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludePunctuation: true

  # Parameter Store for DB Credentials for easy access from application
  DBUsernameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/rds/postgres/username
      Type: String
      Value: !Sub ${DBMasterUsername}

  DBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/rds/postgres/password
      Type: String
      Value: !Sub '{{resolve:secretsmanager:${DBCredentialsSecret}::password}}'


  # RDS Instance
  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: !Ref AllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      DBInstanceIdentifier: !Sub ${EnvironmentName}-db
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      MasterUsername: !Join ["",['{{resolve:secretsmanager:', !Ref DBCredentialsSecret, ':SecretString:username}}']]
      MasterUserPassword: !Join ["",['{{resolve:secretsmanager:', !Ref DBCredentialsSecret, ':SecretString:password}}']]
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: !Ref DBStorageType
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-db
###########################################


  ## ECS INFRASTRUCTURE

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ALB
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALBSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECSSecurityGroup


  ## ECR INFRASTRUCTURE
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-repository
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-repository

  ## OIDC Provider (GitHub)
  GitHubOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 7560d6f40fa55195f740ee2b1b7c0b4836cbe103
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GitHubOidcProvider

  # IAM Role for GitHub Actions to push to ECR
  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-GitHubActionsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${AllowedGithubRepo}:ref:${AllowedGithubBranch}
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
      Path: "/"
      Policies:
        - PolicyName: ECRPush
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                Resource: !GetAtt ECRRepository.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: 
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                  - !Sub arn:aws:s3:::${ArtifactBucket}
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${ArtifactBucket}
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"


  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ExtraECRAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:GetParameterHistory
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs-stack/rds/postgres/username"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs-stack/rds/postgres/password"


  # IAM Role for Task Definition: 
  # This is the role that will be used by the ECS Tasks eg. Upload image and Get image from S3
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ecs-task-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ECSTaskRoleS3Access
          PolicyDocument: # ✅ replaced ManagedPolicyArns with inline permissions
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${ImageBucket}
                  - !Sub arn:aws:s3:::${ImageBucket}/*
              # Allow application to connect to RDS (Postgres)
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: !Sub arn:aws:rds-db:${AWS::Region}:${AWS::AccountId}:dbuser:${RDSInstance}/*
              # Allow application to read secrets from Secrets Manager / SSM
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                Resource: "*"


  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster

  # Log group for ECS
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-log-group
      RetentionInDays: 5

  # Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-task-definition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-container
          Image: !Sub ${ECRRepository.RepositoryUri}:latest
          PortMappings:
            - ContainerPort: !Ref AppPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${EnvironmentName}-container-log
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:80/ || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 120
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs-img-stack/rds/postgres/username
            - Name: DB_PASSWORD
              ValueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/ecs-img-stack/rds/postgres/password
          Environment:
            - Name: DB_PORT
              Value: !GetAtt RDSInstance.Endpoint.Port
            - Name: DB_HOST
              Value: !GetAtt RDSInstance.Endpoint.Address
            - Name: DB_NAME
              Value: !Ref DBName

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-load-balancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-load-balancer

  # Target Group (Blue)
  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-blue
      VpcId: !Ref EcsVPC
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port

  # Target Group (Green)
  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-green
      VpcId: !Ref EcsVPC
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port

  # ALB Listener (start by pointing to Blue TG)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroupBlue
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref AppPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue

  # ECS Service (initially attached to Blue TG)
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - TargetGroupBlue
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub ${EnvironmentName}-service
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 0   # Safe until image exists
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-container
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref TargetGroupBlue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-service

  ## IAM Roles for CodeDeploy
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-code-deploy-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies: # ✅ replaced ManagedPolicyArns with inline permissions
        - PolicyName: CodeDeployECSAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTaskSets
                  - ecs:UpdateServicePrimaryTaskSet
                  - ecs:CreateTaskSet
                  - ecs:DeleteTaskSet
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                  - lambda:InvokeFunction
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ECSTaskExecutionRole.Arn
                  - !GetAtt ECSTaskRole.Arn

    # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-application
      ComputePlatform: ECS

  # CodeDeploy Deployment Group
  CodeDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - ECSService
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${EnvironmentName}-code-deployment-group
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !Sub ${EnvironmentName}-service
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !GetAtt TargetGroupBlue.TargetGroupName
              - Name: !GetAtt TargetGroupGreen.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener

  # IAM Role for CodePipeline s
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-code-pipeline-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelineInlinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:StopDeployment
                  - codedeploy:GetDeploymentConfig
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTaskDefinition
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt ECSTaskExecutionRole.Arn
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchCheckLayerAvailability
                Resource: !GetAtt ECRRepository.Arn

  # S3 Bucket for Pipeline Artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-artifacts
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private

    #################################################################
    # Pipeline to deploy new image on push to ECR repo
    # Source: S3 (zip file containing appspec.yaml and taskdef.json)
    # Build: None (handled by GitHub Actions)
    # Deploy: CodeDeploy (Blue/Green deployment to ECS)
    #################################################################
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvironmentName}-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: !Sub ${DeploymentZipFileName}
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: ECSCodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeploymentGroup
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

  ## IAM Role for EventBridge
  EventBridgeInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-eventbridge-invoke-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AllowStartPipeline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}

  ## EventBridge rule to start pipeline on push to repo
  ECRImagePushEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${EnvironmentName}-ecr-image-push-event-rule
      Description: !Sub ${EnvironmentName}-ECRImagePushEventRule
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          image-tag:
            - latest
          repository-name:
            - !Ref ECRRepository
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${EnvironmentName}-pipeline
          Id: !Sub ${EnvironmentName}-ecr-image-push-event-rule-target
          RoleArn: !GetAtt EventBridgeInvokeRole.Arn

  ## IAM Role for Application Auto Scaling
  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-application-auto-scaling-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ApplicationAutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - iam:CreateServiceLinkedRole
                Resource: "*"

  ## Application Auto Scaling Group
  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${ECSCluster}/${EnvironmentName}-service
      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


  ## CPUScalingPolicy
  CpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-CpuScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
        ScaleInCooldown: 60   # Wait for 60 seconds before scaling in
        ScaleOutCooldown: 60


## Outputs
Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub http://${LoadBalancer.DNSName}

  GitHubOidcRoleArn:
    Description: Role ARN for GitHub Actions to assume via OIDC to push images
    Value: !GetAtt GitHubActionsRole.Arn

  ECRRepositoryUri:
    Description: ECR repository URI to be included in the GitHub Actions workflow
    Value: !GetAtt ECRRepository.RepositoryUri

  CodePipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline

  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService

  ECSTaskExecutionRoleArn:
    Description: ARN of the ECS Task Execution Role
    Value: !GetAtt ECSTaskExecutionRole.Arn

  ECSContainerName:
    Description: Name of the ECS Container
    Value: !Sub ${EnvironmentName}-container

  EnvironmentName:
    Description: Name of the Environment
    Value: !Ref EnvironmentName
  RDSInstance:
    Description: Name of the RDS Instance
    Value: !Ref RDSInstance
  ImageBucket:
    Description: Name of the Image Bucket for storing the images or photos
    Value: !Ref ImageBucket
  ArtifactBucket:
    Description: Name of the Artifact Bucket for CodePipeline
    Value: !Ref ArtifactBucket
    Export:
      Name: !Sub ${EnvironmentName}-ArtifactBucket
